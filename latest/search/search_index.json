{
    "docs": [
        {
            "location": "/", 
            "text": "LyapunovExponents.jl documentation\n\n\n\n\nInterface\n\n\nHigh-level API\n\n\nLow-level API\n\n\n\n\n\n\nExample dynamical systems\n\n\nDiscrete systems\n\n\nContinuous systems", 
            "title": "Home"
        }, 
        {
            "location": "/#lyapunovexponentsjl-documentation", 
            "text": "Interface  High-level API  Low-level API    Example dynamical systems  Discrete systems  Continuous systems", 
            "title": "LyapunovExponents.jl documentation"
        }, 
        {
            "location": "/api/", 
            "text": "Interface\n\n\n\n\nHigh-level API\n\n\n#\n\n\nLyapunovExponents.ContinuousLEProblem\n \n \nType\n.\n\n\nContinuousLEProblem(phase_dynamics!, u0, tspan; \nkeyword arguments\n)\n\n\n\n\nConstruct an \nODEProblem\n and use it for \nContinuousLEProblem\n.  If \ntspan\n is a \nReal\n instead of a \nTuple\n, then \n(0, tspan)\n is passed as the \ntspan\n argument of \nODEProblem\n.\n\n\nFor the list of usable keyword arguments, see \nLEProblem\n.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.DiscreteLEProblem\n \n \nType\n.\n\n\nDiscreteLEProblem(phase_dynamics!, u0, tspan; \nkeyword arguments\n)\n\n\n\n\nConstruct a \nDiscretProblem\n and use it for \nDiscreteLEProblem\n.\n\n\nFor the list of usable keyword arguments, see \nLEProblem\n.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.lyapunov_exponents\n \n \nFunction\n.\n\n\nlyapunov_exponents(solver)\n\n\n\n\nGet the result of Lyapunov exponents calculation stored in \nsolver\n.\n\n\nsource\n\n\nlyapunov_exponents(phase_dynamics!, u0, tspan; \nkeyword arguments\n)\n\n\n\n\nCalculate Lyapunov exponents of a dynamical system.\n\n\nsource\n\n\n\n\nLow-level API\n\n\n#\n\n\nLyapunovExponents.AbstractLEProblem\n \n \nType\n.\n\n\nThe Problem type represents the setup of the Lyapunov exponents calculation.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.AbstractRelaxer\n \n \nType\n.\n\n\nThe Relaxer type represents the calculation required for throwing away the transient part of the dynamics.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.AbstractLESolver\n \n \nType\n.\n\n\nThe Solver type represents the core Lyapunov Exponents (LE) calculation.  The LE calculation is done by calling the in-place mutating function \nsolve!\n.\n\n\nThe methods connecting the three principal types (Problem, Relaxer and Solver) for the LE calculation are shown in the following diagram:\n\n\n\u250c\u2500 Problem (\nAbstractLEProblem\n)                             \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                              \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \nget_relaxer\n, \nrelaxed\n                     \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u25bc                                                              \n\n \u2502\u00a0\u00a0\u00a0Relaxer (\nAbstractRelaxer\n) \u2504\u2504 \u27f2 \nrelax!\n      \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                              \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \nLESolver\n                                           \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                              \n\n \u2502\u2504\u2504\u2504\u2504\u2504\u2504\u2504 \ninit\n, \nsolve\n                       \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                              \n\n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u25bc                                                              \n\n \u2514\u25b6 Solver (\nAbstractLESolver\n) \u2504\u2504 \u27f2 \nsolve!\n,                                                  \nstep!\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.LEProblem\n \n \nType\n.\n\n\nLEProblem(phase_prob;  \nkeyword arguments\n)\n\n\n\n\nArguments\n\n\n\n\nphase_prob\n: Phase space dynamics represented in the form of \nODEProblem\n or \nDiscreteProblem\n from DifferentialEquations.jl. \nphase_prob.tspan\n represents the inter-orthonormalization-interval.\n\n\nnum_tran::Integer\n: Number of iterations to through away to get rid of the transient dynamics.\n\n\ndim_lyap::Integer\n: Number of Lyapunov exponents to be calculated. Default to the full system dimension.\n\n\nQ0::Array\n: The initial guess of the Gram-Schmidt \"Lyapunov vectors\". Default to the identity matrix.\n\n\ntangent_dynamics::Function\n: A vector field for solving phase space  evolution \nand\n tangent space evolution together.  If this is not  provided, \ntangent_dynamics\n is derived from \nphase_prob.f\n.  See  also \nPhaseTangentDynamics\n.\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.LESolver\n \n \nType\n.\n\n\nLESolver(integrator; \nkeyword arguments\n)\n\n\n\n\nA type representing the main calculation of Lyapunov Exponents (LE). This struct holds all temporary state required for LE calculation.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.get_relaxer\n \n \nFunction\n.\n\n\nget_relaxer(prob::AbstractLEProblem; \nkeyword arguments\n) :: AbstractRelaxer\n\n\n\n\nGet a relaxer for a LE problem.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.relaxed\n \n \nFunction\n.\n\n\nrelaxed(prob::AbstractLEProblem; \nkeyword arguments\n) :: AbstractRelaxer\n\n\n\n\nThrowaway the transient part of the phase space dynamics of the LE problem \nprob\n.\n\n\nThat is to say, convert a LE problem (\nAbstractLEProblem\n) to a relaxer (\nAbstractRelaxer\n) and then call \nrelax!\n.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.relax!\n \n \nFunction\n.\n\n\nrelax!(relaxer::AbstractRelaxer; \nkeyword arguments\n)\n\n\n\n\nThrowaway the transient part of the phase space dynamics of the LE problem \nprob\n.\n\n\nsource\n\n\n#\n\n\nDiffEqBase.init\n \n \nFunction\n.\n\n\ninit(prob::AbstractLEProblem; \nkeyword arguments\n) :: AbstractLESolver\n\n\n\n\nRun phase space simulation to throw away the transient and then construct a LE solver.\n\n\nsource\n\n\n#\n\n\nDiffEqBase.step!\n \n \nFunction\n.\n\n\nstep!(solver::AbstractLESolver)\n\n\n\n\nEvolve the dynamics and then do an orthonormalization.\n\n\nsource\n\n\n#\n\n\nDiffEqBase.solve!\n \n \nFunction\n.\n\n\nsolve!(solver::AbstractLESolver, num_attr; \nkeyword arguments\n)\n\n\n\n\nDo \nnum_attr\n times of orthonormalization \nstep!(solver)\n.\n\n\nsource\n\n\nsolve!(demo::LEDemo; progress=-1, \nkeyword arguments\n)\n\n\n\n\nInitialize \ndemo.solver\n from \ndemo.prob\n and run \nsolve!(demo.solver)\n to calculate the Lyapunov exponents.\n\n\nsource\n\n\n#\n\n\nDiffEqBase.solve\n \n \nFunction\n.\n\n\nsolve(prob::AbstractLEProblem, num_attr; \nkeyword arguments\n)\n    :: AbstractLESolver\n\n\n\n\nInitialize the solver (\ninit\n) and then go through the LE calculation (\nsolve!\n).\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.PhaseTangentDynamics\n \n \nType\n.\n\n\nAuto-generated dynamics for solving phase and tangent dynamics together.\n\n\nsource", 
            "title": "Api"
        }, 
        {
            "location": "/api/#interface", 
            "text": "", 
            "title": "Interface"
        }, 
        {
            "location": "/api/#high-level-api", 
            "text": "#  LyapunovExponents.ContinuousLEProblem     Type .  ContinuousLEProblem(phase_dynamics!, u0, tspan;  keyword arguments )  Construct an  ODEProblem  and use it for  ContinuousLEProblem .  If  tspan  is a  Real  instead of a  Tuple , then  (0, tspan)  is passed as the  tspan  argument of  ODEProblem .  For the list of usable keyword arguments, see  LEProblem .  source  #  LyapunovExponents.DiscreteLEProblem     Type .  DiscreteLEProblem(phase_dynamics!, u0, tspan;  keyword arguments )  Construct a  DiscretProblem  and use it for  DiscreteLEProblem .  For the list of usable keyword arguments, see  LEProblem .  source  #  LyapunovExponents.lyapunov_exponents     Function .  lyapunov_exponents(solver)  Get the result of Lyapunov exponents calculation stored in  solver .  source  lyapunov_exponents(phase_dynamics!, u0, tspan;  keyword arguments )  Calculate Lyapunov exponents of a dynamical system.  source", 
            "title": "High-level API"
        }, 
        {
            "location": "/api/#low-level-api", 
            "text": "#  LyapunovExponents.AbstractLEProblem     Type .  The Problem type represents the setup of the Lyapunov exponents calculation.  source  #  LyapunovExponents.AbstractRelaxer     Type .  The Relaxer type represents the calculation required for throwing away the transient part of the dynamics.  source  #  LyapunovExponents.AbstractLESolver     Type .  The Solver type represents the core Lyapunov Exponents (LE) calculation.  The LE calculation is done by calling the in-place mutating function  solve! .  The methods connecting the three principal types (Problem, Relaxer and Solver) for the LE calculation are shown in the following diagram:  \u250c\u2500 Problem ( AbstractLEProblem )                              \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                               \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502  get_relaxer ,  relaxed                       \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u25bc                                                               \n \u2502\u00a0\u00a0\u00a0Relaxer ( AbstractRelaxer ) \u2504\u2504 \u27f2  relax!        \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                               \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502  LESolver                                             \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                               \n \u2502\u2504\u2504\u2504\u2504\u2504\u2504\u2504  init ,  solve                         \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u2502                                                               \n \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u25bc                                                               \n \u2514\u25b6 Solver ( AbstractLESolver ) \u2504\u2504 \u27f2  solve! ,                                                   step!  source  #  LyapunovExponents.LEProblem     Type .  LEProblem(phase_prob;   keyword arguments )  Arguments   phase_prob : Phase space dynamics represented in the form of  ODEProblem  or  DiscreteProblem  from DifferentialEquations.jl.  phase_prob.tspan  represents the inter-orthonormalization-interval.  num_tran::Integer : Number of iterations to through away to get rid of the transient dynamics.  dim_lyap::Integer : Number of Lyapunov exponents to be calculated. Default to the full system dimension.  Q0::Array : The initial guess of the Gram-Schmidt \"Lyapunov vectors\". Default to the identity matrix.  tangent_dynamics::Function : A vector field for solving phase space  evolution  and  tangent space evolution together.  If this is not  provided,  tangent_dynamics  is derived from  phase_prob.f .  See  also  PhaseTangentDynamics .   source  #  LyapunovExponents.LESolver     Type .  LESolver(integrator;  keyword arguments )  A type representing the main calculation of Lyapunov Exponents (LE). This struct holds all temporary state required for LE calculation.  source  #  LyapunovExponents.get_relaxer     Function .  get_relaxer(prob::AbstractLEProblem;  keyword arguments ) :: AbstractRelaxer  Get a relaxer for a LE problem.  source  #  LyapunovExponents.relaxed     Function .  relaxed(prob::AbstractLEProblem;  keyword arguments ) :: AbstractRelaxer  Throwaway the transient part of the phase space dynamics of the LE problem  prob .  That is to say, convert a LE problem ( AbstractLEProblem ) to a relaxer ( AbstractRelaxer ) and then call  relax! .  source  #  LyapunovExponents.relax!     Function .  relax!(relaxer::AbstractRelaxer;  keyword arguments )  Throwaway the transient part of the phase space dynamics of the LE problem  prob .  source  #  DiffEqBase.init     Function .  init(prob::AbstractLEProblem;  keyword arguments ) :: AbstractLESolver  Run phase space simulation to throw away the transient and then construct a LE solver.  source  #  DiffEqBase.step!     Function .  step!(solver::AbstractLESolver)  Evolve the dynamics and then do an orthonormalization.  source  #  DiffEqBase.solve!     Function .  solve!(solver::AbstractLESolver, num_attr;  keyword arguments )  Do  num_attr  times of orthonormalization  step!(solver) .  source  solve!(demo::LEDemo; progress=-1,  keyword arguments )  Initialize  demo.solver  from  demo.prob  and run  solve!(demo.solver)  to calculate the Lyapunov exponents.  source  #  DiffEqBase.solve     Function .  solve(prob::AbstractLEProblem, num_attr;  keyword arguments )\n    :: AbstractLESolver  Initialize the solver ( init ) and then go through the LE calculation ( solve! ).  source  #  LyapunovExponents.PhaseTangentDynamics     Type .  Auto-generated dynamics for solving phase and tangent dynamics together.  source", 
            "title": "Low-level API"
        }, 
        {
            "location": "/examples/", 
            "text": "Example dynamical systems\n\n\n#\n\n\nLyapunovExponents.LEDemo\n \n \nType\n.\n\n\nLEDemo(example::LEExample; \nkeyword arguments\n)\n\n\n\n\nHere is an example code for constructing an example dynamical system, calculate its LEs and plot them:\n\n\nusing LyapunovExponents\nusing Plots\ndemo = solve!(LyapunovExponents.lorenz_63())\nplot(demo)\n\n\n\n\nCreate a \nLEDemo\n holding an \nexample\n and an appropriate \nLEProblem\n created from the \nexample\n.\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.LEExample\n \n \nType\n.\n\n\nA type to hold an example dynamical system and its known Lyapunov exponents.\n\n\nsource\n\n\n\n\nDiscrete systems\n\n\n#\n\n\nLyapunovExponents.henon_map\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for the H\u00e9non map.\n\n\n\n\nM. H\u00e9non, Commun. Math. Phys. Phys. 50, 69-77 (1976)\n\n\nhttp://sprott.physics.wisc.edu/chaos/comchaos.htm\n\n\nhttps://en.wikipedia.org/wiki/H%C3%A9non_map\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.standard_map\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for the Chirikov standard map.\n\n\n\n\nB. V. Chirikov, Physics Reports 52, 263-379 (1979)\n\n\nhttp://sprott.physics.wisc.edu/chaos/comchaos.htm\n\n\nhttps://en.wikipedia.org/wiki/Standard_map\n\n\nhttp://www.scholarpedia.org/article/Chirikov_standard_map\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.bakers_map\n \n \nFunction\n.\n\n\nBaker's map\n\n\n\n\nhttps://en.wikipedia.org/wiki/Baker%27s_map\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.arnold_cat_map\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for the Arnold's cat map\n\n\n\n\nhttps://en.wikipedia.org/wiki/Arnold%27s_cat_map\n\n\n\n\nsource\n\n\n\n\nContinuous systems\n\n\n#\n\n\nLyapunovExponents.lorenz_63\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for the Lorenz system.\n\n\n\n\nhttps://en.wikipedia.org/wiki/Lorenz_system\n\n\nhttp://sprott.physics.wisc.edu/chaos/comchaos.htm\n\n\nE. N. Lorenz, J. Atmos. Sci. 20, 130-141 (1963)\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.linz_sprott_99\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for the simplest piecewise linear dissipative chaotic flow.\n\n\n\n\nhttp://sprott.physics.wisc.edu/chaos/comchaos.htm\n\n\nS. J. Linz and J. C. Sprott, Phys. Lett. A 259, 240-245 (1999)\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.van_der_pol\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for the van der Pol oscillator with periodic forcing.\n\n\n.known_exponents\n are extracted from Figure 6 of Geist, Parlitz \n Lauterborn (1990).\n\n\n\n\nhttp://scholarpedia.org/article/Van_der_Pol_oscillator\n\n\nhttps://en.wikipedia.org/wiki/Van_der_Pol_oscillator\n\n\nvan der Pol and van der Mark. \u201cFrequency Demultiplication.\u201d Nature 120, no. 3019 (September 1927): 363. \nhttps://doi.org/10.1038/120363a0\n.\n\n\nParlitz, Ulrich, and Werner Lauterborn. \u201cPeriod-Doubling Cascades and Devil\u2019s Staircases of the Driven van Der Pol Oscillator.\u201d Physical Review A 36, no. 3 (August 1, 1987): 1428\u201334. \nhttps://doi.org/10.1103/PhysRevA.36.1428\n. (Figure 10a)\n\n\nGeist, K., Parlitz, U., \n Lauterborn, W. (1990). Comparison of Different Methods for Computing Lyapunov Exponents. Progress of Theoretical Physics, 83, 875\u2013893. \nhttps://doi.org/10.1143/PTP.83.875\n. (Figure 6)\n\n\n\n\nsource\n\n\n#\n\n\nLyapunovExponents.beer_95\n \n \nFunction\n.\n\n\nReturn a \nLEDemo\n for a low-dimensional chaotic continuous-time recurrent neural networks by Beer (1995).\n\n\n\n\nBeer, R. D. (1995). On the dynamics of small continuous-time recurrent neural networks. Adapt. Behav., 3(4), 469\u2013509. \nhttps://doi.org/10.1177/105971239500300405\n. (Figure 9D)\n\n\n\n\nsource", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#example-dynamical-systems", 
            "text": "#  LyapunovExponents.LEDemo     Type .  LEDemo(example::LEExample;  keyword arguments )  Here is an example code for constructing an example dynamical system, calculate its LEs and plot them:  using LyapunovExponents\nusing Plots\ndemo = solve!(LyapunovExponents.lorenz_63())\nplot(demo)  Create a  LEDemo  holding an  example  and an appropriate  LEProblem  created from the  example .  source  #  LyapunovExponents.LEExample     Type .  A type to hold an example dynamical system and its known Lyapunov exponents.  source", 
            "title": "Example dynamical systems"
        }, 
        {
            "location": "/examples/#discrete-systems", 
            "text": "#  LyapunovExponents.henon_map     Function .  Return a  LEDemo  for the H\u00e9non map.   M. H\u00e9non, Commun. Math. Phys. Phys. 50, 69-77 (1976)  http://sprott.physics.wisc.edu/chaos/comchaos.htm  https://en.wikipedia.org/wiki/H%C3%A9non_map   source  #  LyapunovExponents.standard_map     Function .  Return a  LEDemo  for the Chirikov standard map.   B. V. Chirikov, Physics Reports 52, 263-379 (1979)  http://sprott.physics.wisc.edu/chaos/comchaos.htm  https://en.wikipedia.org/wiki/Standard_map  http://www.scholarpedia.org/article/Chirikov_standard_map   source  #  LyapunovExponents.bakers_map     Function .  Baker's map   https://en.wikipedia.org/wiki/Baker%27s_map   source  #  LyapunovExponents.arnold_cat_map     Function .  Return a  LEDemo  for the Arnold's cat map   https://en.wikipedia.org/wiki/Arnold%27s_cat_map   source", 
            "title": "Discrete systems"
        }, 
        {
            "location": "/examples/#continuous-systems", 
            "text": "#  LyapunovExponents.lorenz_63     Function .  Return a  LEDemo  for the Lorenz system.   https://en.wikipedia.org/wiki/Lorenz_system  http://sprott.physics.wisc.edu/chaos/comchaos.htm  E. N. Lorenz, J. Atmos. Sci. 20, 130-141 (1963)   source  #  LyapunovExponents.linz_sprott_99     Function .  Return a  LEDemo  for the simplest piecewise linear dissipative chaotic flow.   http://sprott.physics.wisc.edu/chaos/comchaos.htm  S. J. Linz and J. C. Sprott, Phys. Lett. A 259, 240-245 (1999)   source  #  LyapunovExponents.van_der_pol     Function .  Return a  LEDemo  for the van der Pol oscillator with periodic forcing.  .known_exponents  are extracted from Figure 6 of Geist, Parlitz   Lauterborn (1990).   http://scholarpedia.org/article/Van_der_Pol_oscillator  https://en.wikipedia.org/wiki/Van_der_Pol_oscillator  van der Pol and van der Mark. \u201cFrequency Demultiplication.\u201d Nature 120, no. 3019 (September 1927): 363.  https://doi.org/10.1038/120363a0 .  Parlitz, Ulrich, and Werner Lauterborn. \u201cPeriod-Doubling Cascades and Devil\u2019s Staircases of the Driven van Der Pol Oscillator.\u201d Physical Review A 36, no. 3 (August 1, 1987): 1428\u201334.  https://doi.org/10.1103/PhysRevA.36.1428 . (Figure 10a)  Geist, K., Parlitz, U.,   Lauterborn, W. (1990). Comparison of Different Methods for Computing Lyapunov Exponents. Progress of Theoretical Physics, 83, 875\u2013893.  https://doi.org/10.1143/PTP.83.875 . (Figure 6)   source  #  LyapunovExponents.beer_95     Function .  Return a  LEDemo  for a low-dimensional chaotic continuous-time recurrent neural networks by Beer (1995).   Beer, R. D. (1995). On the dynamics of small continuous-time recurrent neural networks. Adapt. Behav., 3(4), 469\u2013509.  https://doi.org/10.1177/105971239500300405 . (Figure 9D)   source", 
            "title": "Continuous systems"
        }
    ]
}